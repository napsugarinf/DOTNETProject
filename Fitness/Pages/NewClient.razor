@page "/addnewclient"

<PageTitle>New Client</PageTitle>

@using Fitness.Data
@using System.Text.RegularExpressions;
@inject Fitness.IService.IClientService clientService

<div class="row">
    <div class="col-md-4">
        <EditForm EditContext="@editContext" Model="@Client" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="row" style="margin-top:5px">
            <div class="col-md-4">
                <label> Id card: </label>
            </div>
            <div class="col-md-8">
                <input @bind="Client.IdCard" style="width:100%;" placeholder="Client id card" />
                <ValidationMessage For="@(() => Client.IdCard)" />
            </div>
        </div>
        <div class="row" style="margin-top:5px">
            <div class="col-md-4">
                <label> Name: </label>
            </div>
            <div class="col-md-8">
                <input @bind="Client.Name" style="width:100%;" placeholder="Client name" />
                <ValidationMessage For="@(() => Client.Name)" />
            </div>
        </div>
        <div class="row" style="margin-top:5px">
            <div class="col-md-4">
                <label> Phone Number: </label>
            </div>
            <div class="col-md-8">
                <input @bind="Client.PhoneNr" style="width:100%;" placeholder="ex. +40*********" />
                <ValidationMessage For="@(() => Client.PhoneNr)" />
            </div>
        </div>
        <div class="row" style="margin-top:5px">
            <div class="col-md-4">
                <label> Email: </label>
            </div>
            <div class="col-md-8">
                <input @bind="Client.Email" style="width:100%;" placeholder=" ex. name@gmail.com" />
                <ValidationMessage For="@(() => Client.Email)" />
            </div>
        </div>
        <div class="row" style="margin-top:5px">
            <div class="col-md-4">
                <label> Address: </label>
            </div>
            <div class="col-md-8">
                <input @bind="Client.Address" style="width:100%;" placeholder="nr. str. city" />
                <ValidationMessage For="@(() => Client.Address)" />
            </div>
        </div>
        <div class="row" style="margin-top:5px">
            <div class="col-md-4">
                <label> Barcode: </label>
            </div>
            <div class="col-md-8">
                <button class="btn btn-primary" @onclick="@(e=>GenerateBarcode())">Generate barcode</button>
                <label>@Client.Barcode</label>
                <ValidationMessage For="@(() => Client.Barcode)" />
            </div>
        </div>
        <div class="row" style="margin-top:5px">
            <div class="col-md-4">
                <label> Additional Information: </label>
            </div>
            <div class="col-md-8">
                <textarea @bind="Client.AdditionanInformation" style="width:100%;" placeholder="Additional information" />
            </div>
        </div>
        <div class="row" style="margin-top:5px">
            <div class="col-md-4"> </div>
            <div class="col-md-8">
                <button type="submit">Submit</button>
                <button class="btn btn-primary" @onclick="@(e=>Reset())" style="float:right; margin-right:10px; background-color:red">Reset</button>
            </div>
        </div>
    </EditForm>
    </div>
    <div class="col-md-6">
        <NavLink class="nav-link" href="buymembership">
            <span class="oi oi-plus" aria-hidden="true"></span> Buy Membership
        </NavLink>
    </div>

   @* <div class="col-md-8">
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Client Id   </th>
                    <th>Name  </th>
                    <th>Phone Number  </th>
                    <th>Email   </th>

                </tr>
            </thead>
            <tbody>
                @if (Clients.Count() > 0)
                {
                    @foreach (var cli in Clients)
                    {
                        <tr>
                            <td>@cli.Id</td>
                            <td>@cli.Name</td>
                            <td>@cli.PhoneNr</td>
                            <td>@cli.Email</td>
                            <td>
                                <button class="btn btn-primary" @onclick="@(e=>Edit(cli.Id))">Edit</button>
                                <button class="btn btn-primary" @onclick="@(e=>Delete(cli.Id))">Delete</button>
                            </td>
                        </tr>
                    }

                }
            </tbody>
        </table>
    </div>*@

</div>


@code {
    Client Client;
    List<Client> Clients = new List<Client>();
    private EditContext editContext;

    protected override void OnInitialized()
    {
        Client = new Client();
        editContext = new EditContext(Client);
    }
    private async Task HandleValidSubmit()
    {
        /*var isValid = editContext.Validate();

        if (isValid)
        {
            clientService.SaveOrUpdate(Client);
        }
        Reset();*/
    }
    private void Reset()
    {
        Client = new Client();

    }
    private List<String> Validation(Client client)
    {
        List<String> message = new List<String>();
        string result = ValidationIdCard(client.IdCard);
        if (result.Length > 0)
        {
            message.Add(result);
        }
        result = ValidationName(client.Name);
        if (result.Length > 0)
        {
            message.Add(result);
        }
        return message;
    }

    private string ValidationName(String name)
    {
        int error = 0;
        string message = "";
        Regex rg = new Regex("[1-9]{1}[0-9]{12}");

        return message;
    }

    private string ValidationIdCard(String idcard)
    {
        int error = 0;
        string message = "";
        Regex rg = new Regex("[1-9]{1}[0-9]{12}");
        if (idcard.Length > 13)
        {
            error++;
            message = "Id card is not longer than 13 digits.";
        }
        if (idcard.Length < 13)
        {
            error++;
            message = "Id card is not shorter than 13 digits.";
        }
        if (rg.IsMatch(idcard))
        {
            error++;
            message = "Id card is only numbers";
        }

        if (error > 1)
        {
            message = "Id card is not correct";
        }
        return message;
    }
    private void GenerateBarcode()
    {
        Guid guid = Guid.NewGuid();
        string uniqueId = Convert.ToBase64String(guid.ToByteArray());
        Client.Barcode = uniqueId.Replace("/", "").Replace("+", "").Substring(0, 13);
        //uniqueId = uniqueId.Replace("/", "").Replace("+", "").Substring(0, 10);
        //return uniqueId;
    }
    //private void Edit(string clientId)
    //{
    //    Client = clientService.GetClient(clientId);
    //}
    //private void Delete(string clientId)
    //{
    //    clientService.Delete(clientId);
    //    GetClients();
    //}
}