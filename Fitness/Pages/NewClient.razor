@page "/addnewclient"

<PageTitle>New Client</PageTitle>

@using Fitness.Data
@using System.Text.RegularExpressions;
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@inject Fitness.IService.IClientService clientService

<div class="row">
    <div class="col-md-4">
        <EditForm Model="@Client" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="row" style="margin-top:5px">
            <div class="col-md-4">
                <label> Id card: </label>
            </div>
            <div class="col-md-8">
                <input @bind="Client.IdCard" style="width:100%;" placeholder="Client id card" />
                <ValidationMessage For="@(() => Client.IdCard)" />
            </div>
        </div>
        <div class="row" style="margin-top:5px">
            <div class="col-md-4">
                <label> Name: </label>
            </div>
            <div class="col-md-8">
                <input @bind="Client.Name" style="width:100%;" placeholder="Client name" />
                <ValidationMessage For="@(() => Client.Name)" />
            </div>
        </div>
        <div class="row" style="margin-top:5px">
            <div class="col-md-4">
                <label> Phone Number: </label>
            </div>
            <div class="col-md-8">
                <input @bind="Client.PhoneNr" style="width:100%;" placeholder="ex. +40*********" />
                <ValidationMessage For="@(() => Client.PhoneNr)" />
            </div>
        </div>
        <div class="row" style="margin-top:5px">
            <div class="col-md-4">
                <label> Email: </label>
            </div>
            <div class="col-md-8">
                <input @bind="Client.Email" style="width:100%;" placeholder=" ex. name@gmail.com" />
                <ValidationMessage For="@(() => Client.Email)" />
            </div>
        </div>
        <div class="row" style="margin-top:5px">
            <div class="col-md-4">
                <label> Address: </label>
            </div>
            <div class="col-md-8">
                <input @bind="Client.Address" style="width:100%;" placeholder="nr. str. city" />
                <ValidationMessage For="@(() => Client.Address)" />
            </div>
        </div>
        <div class="row" style="margin-top:5px">
            <div class="col-md-4">
                <label> Barcode: </label>
            </div>
            <div class="col-md-8">
                    <button type="button" class="btn btn-primary" @onclick="@(e=>GenerateBarcode())">Generate barcode</button>
                <label>@Client.Barcode</label>
                <ValidationMessage For="@(() => Client.Barcode)" />
            </div>
        </div>
        <div class="row" style="margin-top:5px">
            <div class="col-md-4">
                <button type="button" class="btn btn-primary" @onclick="Capture">
                    <span class="oi oi-camera-slr" aria-hidden="true"></span>Create photo
                </button>
            </div>
            <div class="col-md-4" style="width:300px; height:300px; background-color:red">
                <p>Camera</p>
                <div style="width:200px; height:200px; background-color:green" id ="camera"></div>
            </div>
            <div class="col-md-4" style="width:300px; height:300px; background-color:blue">
                <div id ="results">Your image</div>
                    <img src="@imageUrl" alt="Alternate Text" style="width:300px; height:300px;" />
            </div>
        </div>
        <div class="row" style="margin-top:5px">
            <div class="col-md-4">
                <label> Additional Information: </label>
            </div>
            <div class="col-md-8">
                <textarea @bind="Client.AdditionanInformation" style="width:100%;" placeholder="Additional information" />
            </div>
        </div>
        <div class="row" style="margin-top:5px">
            <div class="col-md-4"> </div>
            <div class="col-md-8">
                    <button class="btn btn-primary" type="submit">Submit</button>
                    <button type="button" class="btn btn-primary" @onclick="@(e=>Reset())" style="float:right; margin-right:10px; background-color:red">Reset</button>
            </div>
        </div>
    </EditForm>
    </div>
    <div class="alert alert-primary @HideAlert" role="alert">
        @AlertContent
    </div>
    <div class="col-md-6">
        <button @onclick="() => ButtonHandler()">
            <span class="oi oi-plus" aria-hidden="true"></span> Buy Membership
        </button>
    </div>
     <div class="col-md-8">
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>Client Id   </th>
                    <th>Name  </th>
                    <th>Phone Number  </th>
                    <th>Email   </th>
                    <th>Inserted By Date</th>
                    <th>Is Deleted</th>
                </tr>
            </thead>
            <tbody>
                @if (Clients.Count() > 0)
                {
                    @foreach (var cli in Clients)
                    {
                    <tr>
                            <td>@cli.Id</td>
                            <td>@cli.Name</td>
                            <td>@cli.PhoneNr</td>
                            <td>@cli.Email</td>
                            <td>@cli.InsertedByDate</td>
                            <td>@cli.IsDeleted</td>
                            <td>
                                <button class="btn btn-primary" @onclick="@(e=>Delete(cli.Id))">Delete</button>
                            </td>
                    </tr>    
                    }

                }
            </tbody>
        </table>
    </div>
</div>


@code {
    Client Client = new Client();
    List<Client> Clients = new List<Client>();
    bool clientIsSave = false;
    string imageUrl="";

    protected override void OnInitialized()
    {
        GetClients();  
    }
    private void GetClients()
    {
        Clients = clientService.GetClients();    
    }
    private async Task HandleValidSubmit()
    {
        EditContext editContext = new EditContext(Client);
        var isValid = editContext.Validate();
        if (isValid )
        {
            await clientService.SaveAsync(Client);
            clientIsSave = true;
            DoSomthing();
            Reset();
        }
        else
        {
            clientIsSave = false;
        }
        GetClients();
    }
    private void Reset()
    {
        Client = new Client();

    }
    private void GenerateBarcode()
    {
        Guid guid = Guid.NewGuid();
        string uniqueId = Convert.ToBase64String(guid.ToByteArray());
        Client.Barcode = uniqueId.Replace("/", "").Replace("+", "").Substring(0, 13);
        //uniqueId = uniqueId.Replace("/", "").Replace("+", "").Substring(0, 10);
        //return uniqueId;
    }
    private void Delete(string clientId)
    {
        clientService.Delete(clientId);
        GetClients();
    }

    private string HideAlert { get; set; } = "d-none";
    private string AlertContent { get; set; } = "This is a primary alert—check it out!";
    private void DoSomthing()
    {
        if (HideAlert == "")
        {
            HideAlert = "d-none";
            AlertContent = "This is a primary alert—check it out!";
        }
        else
        {
            HideAlert = "";
            AlertContent = "The save is successful";
        }
    }
    private void ButtonHandler()
    {
        clientIsSave = true;
        if (clientIsSave)
        {
            Client.Id = "64523d069a001465a6b9f99f";
            navigationManager
             .NavigateTo($"/buymembership/{Client.Id}");
        }

    }

    public async void Capture(){
        imageUrl= await JSRuntime.InvokeAsync<string>("take_snapshot");
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender){
        
        if(firstRender){
            JSRuntime.InvokeVoidAsync("ready",this);
        }

    }
}