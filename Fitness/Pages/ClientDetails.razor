@page "/clientdetails"
@*@page "/clientdetails/{ClientId:String}"*@
<PageTitle>Client Details</PageTitle>

@using Fitness.Data
@using System.Text.RegularExpressions;
@inject NavigationManager navigationManager
@inject Fitness.IService.ITypeOfMembership typeOfMembershipService
@inject Fitness.IService.IGymService gymService
@inject Fitness.IService.IClientService clientService
@inject Fitness.IService.IClientsMembershipsService clientsMembershipsService
@inject Fitness.IService.ICheckInService checkInService

@if(Client == null || Client.IsDeleted == true)
{
	<p>The client's data could not be loaded</p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <img src="@Client.Photo" alt="Alternate Text" style="width:220px; height:180px; margin:30px" />
        </div>
        <div class="col-md-4" style="margin-top:30px">
            <h3 style=" color:deepskyblue">@Client.Name</h3>
			<a @onclick="() =>NavigateEditPageButtonHandler()">Edit Informations</a>
            <ul>
                <li><b>Id card:</b> @Client.IdCard</li>
                <li><b>Email address:</b>  @Client.Email</li>
                <li><b>Phone number:</b> @Client.PhoneNr</li>
                <li><b>Address:</b> - @Client.Address</li>
                <li><b>Barcode: @Client.Barcode</b></li>
                @*@if (@Client.AdditionalInformation.Length > 1)
                {
                    <li>@Client.AdditionalInformation</li>
                }*@
            </ul>
        </div>
    </div>
    <h4>Memberships</h4>
	<div class="row">
		<div class="col-md-4" style="margin-bottom:7px; margin-left:30px;">
			<h6>
				<span class="oi oi-magnifying-glass" aria-hidden="true"></span>
				Search membership
			</h6>
		</div>
		<div class="col-md-4" style="margin-left:-90px; margin-top:12px;">
			<input style="margin-left:-40px" onchange=@OnDescriptionChanged oninput="(this.dispatchEvent(new CustomEvent('change', {bubbles: true})))" />
		</div>
	</div>
	<div class="row">
	<table class="table table-striped">
		<tr style="background-color:#336699; height:50px">
			<td align="center"></td>
			<td align="center">
				Description
			</td>
			<td align="center">
				Price
			</td>
			<td align="center">
				Date of purchasing
			</td>
			<td align="center">
				Check ins
			</td>
			<td align="center">
				Gym 
			</td>
			<td align="center">
			</td>
		</tr>
		<tbody>
				@foreach (var Membership in ClientMemberships)
			{
				<tr>
					<td align="center"></td>
					<td align="center">
						<span>
							@GetMembershipDescription(Membership.MembershipId)
						</span>
					</td>
					<td align="center">
						<span>
							@Membership.Price
						</span>
					</td>
					<td align="center">
						<span>
							@Membership.DateOfPurchasing
						</span>
					</td>
					<td align="center">
						<span>
							x / @Membership.CheckInsSoFa
						</span>
					</td>
					<td align="center">
						<span>
							@GetGymName(Membership.GymId)
						</span>
					</td>
					<td align="center">
						@if (Membership.Validity)
						{
							<button class="btn btn-primary" @onclick="() => CheckInButtonHandler()">Check in</button>
						}
					</td>
				</tr>
			}
		</tbody>
	</table>
	</div>

    <div class="row">
        <button class="btn btn-primary" @onclick="() => ButtonHandler()">
            <span class="oi oi-plus" aria-hidden="true"></span> Buy Membership
        </button>
    </div>
}



@code {
	//Sara id "64568d675b43a00177c57031"
	//Emily id "64523d069a001465a6b9f99f"
	private string clientId = "64568d675b43a00177c57031";

	Client Client;
	List<Client> Clients = new List<Client>();
	public List<ClientsMemberships> ClientMemberships = new List<ClientsMemberships>();

	[Parameter]
	public string? ClientId { get; set; }

	protected async override Task OnInitializedAsync()
	{
		Client = await clientService.GetClientAsync(clientId);
		ClientMemberships = await clientsMembershipsService.GetClientMembershipsAsync(Client.Id);
	}


	private void ButtonHandler()
	{
		navigationManager
				.NavigateTo($"/buymembership/{Client.Id}");

	}
	private void CheckInButtonHandler()
	{
		//kerje le ujra a kliens berleteit a vegen
	}

	void OnDescriptionChanged(ChangeEventArgs args)
	{
		string values = args.Value.ToString();
		membershipFilteringList(values, "Description");
	}

	//Filtering
	protected async Task membershipFilteringList(String Value, string columnName)
	{
		/*
		if (Value.Trim().Length > 0)
					{
					switch (columnName)
					{
					case "Description":
					TypeOfMemberships = TypeOfMemberships.Where(x => x.Description.Contains(Value)).ToList();
				break;
				case "ValidityInDays":
					TypeOfMemberships = TypeOfMemberships.Where(x => x.ValidityInDays.Equals(Int32.Parse(Value))).ToList();
				break;
				case "ValidityInCheckIn":
					TypeOfMemberships = TypeOfMemberships.Where(x => x.ValidityInCheckIn.Equals(Int32.Parse(Value))).ToList();
				break;
				case "GymId":
					TypeOfMemberships = TypeOfMemberships.Where(x => getGymName(x.GymId).Contains(Value)).ToList();
				break;
				default:
					TypeOfMemberships = typeOfMembershipService.GetTypeOfMemberships();
					break;
		}
		}
		else
			{
			TypeOfMemberships = typeOfMembershipService.GetTypeOfMemberships();
		}*/
	}
	private string GetGymName(string gymId)
	{
		Gym gym = gymService.GetGym(gymId);
		return gym.Name;
	}

	private string GetMembershipDescription(string typeMembershipId)
	{
		string description = "";
		TypeOfMembership typeOfMembership = typeOfMembershipService.GetTypeOfMembership(typeMembershipId);
		if(typeOfMembership != null)
		{
			description = typeOfMembership.Description;
		}
		return description;
	}
	private void NavigateEditPageButtonHandler()
	{
		//navigationManager.NavigateTo($"/editclientinfo/{Client.Id}");
		navigationManager.NavigateTo($"/editclientinfo");
	}

}
