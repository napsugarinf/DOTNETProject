@page "/clientdetails/{ClientId}"
@*@page "/clientdetails/{ClientId:String}"*@
<PageTitle>Client Details</PageTitle>

@using Fitness.Data
@using System.Text.RegularExpressions;
@inject NavigationManager navigationManager
@inject Fitness.IService.ITypeOfMembership typeOfMembershipService
@inject Fitness.IService.IGymService gymService
@inject Fitness.IService.IClientService clientService
@inject Fitness.IService.IClientsMembershipsService clientsMembershipsService
@inject Fitness.IService.ICheckInService checkInService

@if(Client == null || Client.IsDeleted == true)
{
	<p>The client's data could not be loaded</p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <img src="@Client.Photo" alt="Alternate Text" style="width:220px; height:180px; margin:30px" />
        </div>
        <div class="col-md-4" style="margin-top:30px">
            <h3 style=" color:deepskyblue">@Client.Name</h3>
			<a @onclick="() =>NavigateEditPageButtonHandler()">Edit Informations</a>
            <ul>
                <li><b>Id card:</b> @Client.IdCard</li>
                <li><b>Email address:</b>  @Client.Email</li>
                <li><b>Phone number:</b> @Client.PhoneNr</li>
                <li><b>Address:</b> - @Client.Address</li>
                <li><b>Barcode: @Client.Barcode</b></li>
                @*@if (@Client.AdditionalInformation.Length > 1)
                {
                    <li>@Client.AdditionalInformation</li>
                }*@
            </ul>
        </div>
    </div>
    <h4>Memberships</h4>
	<div class="row">
		<div class="col-md-4" style="margin-bottom:7px; margin-left:30px;">
			<h6>
				<span class="oi oi-magnifying-glass" aria-hidden="true"></span>
				Search membership
			</h6>
		</div>
		<div class="col-md-4" style="margin-left:-90px; margin-top:12px;">
			<input style="margin-left:-40px" onchange=@OnDescriptionChangedAsync oninput="(this.dispatchEvent(new CustomEvent('change', {bubbles: true})))" />
		</div>
	</div>
	<div class="row">
	<table class="table table-striped">
		<tr style="background-color:#336699; height:50px">
			<td align="center"></td>
			<td align="center">
				Description
			</td>
			<td align="center">
				Price
			</td>
			<td align="center">
				Date of purchasing
			</td>
			<td>
				Starting date
			</td>
			<td align="center">
				Check ins
			</td>
			<td align="center">
				Gym 
			</td>
			<td align="center">
			</td>
		</tr>
		<tbody>
				@foreach (var Membership in ClientMemberships)
			{
				<tr>
					<td align="center"></td>
					<td align="center">
						<span>
							@GetMembershipDescription(Membership.MembershipId)
						</span>
					</td>
					<td align="center">
						<span>
							@Membership.Price
						</span>
					</td>
					<td align="center">
						<span>
							@Membership.DateOfPurchasing
						</span>
					</td>
						<td align="center">
							<span>
								@Membership.DateOfFirstUse
							</span>
						</td>
					<td align="center">
						<span>
							@GetValidityInCheckIn(Membership.MembershipId) / @Membership.CheckInsSoFa
						</span>
					</td>
					<td align="center">
						<span>
							@GetGymName(Membership.GymId)
						</span>
					</td>
					<td align="center">
						@if (Membership.Validity && Membership.DateOfFirstUse.Subtract(DateTime.Now).Days == 0)
						{
							<button class="btn btn-primary" @onclick="() => CheckInButtonHandler(Membership.ClientsMembershipsId)">Check in</button>
						}
						else if (!Membership.Validity )
						{
							<p>invalid membership</p>
						}
					</td>
				</tr>
			}
		</tbody>
	</table>
	</div>

    <div class="row">
		<button class="btn btn-primary" @onclick="() => BuyMembershipButtonHandler()">
            <span class="oi oi-plus" aria-hidden="true"></span> Buy Membership
        </button>
    </div>
}



@code {
	//Sara id "64568d675b43a00177c57031"
	//Emily id "64523d069a001465a6b9f99f"
	private string clientId = "64568d675b43a00177c57031";

	Client Client;
	List<Client> Clients = new List<Client>();
	public List<ClientsMemberships> ClientMemberships = new List<ClientsMemberships>();
	//public List<ClientsMembershipsExtended> ClientsMembershipsExtendeds = new List<ClientsMembershipsExtended>(); 

	[Parameter]
	public string? ClientId { get; set; }

	protected async override Task OnInitializedAsync()
	{
		Client = await clientService.GetClientAsync(clientId);
		ClientMemberships = await clientsMembershipsService.GetClientAllMembershipsAsync(Client.Id);
		//ClientsMembershipsExtendeds = await clientsMembershipsService.SearchClientMembershipDescriptioAsync(Client.Id);

	}


	private void BuyMembershipButtonHandler()
	{
		navigationManager
				.NavigateTo($"/buymembership/{Client.Id}");

	}
	private async void CheckInButtonHandler(string cmId)
	{
		ClientsMemberships cm = await clientsMembershipsService.GetClientMembershipAsync(cmId);
		if(cm != null)
		{
			TypeOfMembership typeOfMembership = await typeOfMembershipService.GetTypeOfMembershipAsync(cm.MembershipId);
			if(typeOfMembership!= null)
			{
				bool validityTime = ValidityInDays(typeOfMembership.ValidityInDays,
					cm.DateOfFirstUse, cm.CheckInsSoFa,typeOfMembership.FromTime,typeOfMembership.ToTime);
				if(typeOfMembership.ValidityInCheckIn > cm.CheckInsSoFa && validityTime)
				{
					cm.CheckInsSoFa++;
					await clientsMembershipsService.UpdateAsync(cm);
					CheckIns checkIns = new CheckIns();
					checkIns.ClientId = cm.ClientId;
					checkIns.MembershipId = cm.MembershipId;
					checkIns.Date = DateTime.Now;
					checkIns.InsertedByUserId = "";////////////////////////// Nincs megadva a UserId ///////////////////////////////
					checkIns.Barcode = cm.Barcode;
					checkIns.GymId = cm.GymId;

					await checkInService.SaveAsync(checkIns);
				}
				if( (cm.DateOfFirstUse.Day+typeOfMembership.ValidityInDays) < DateTime.Now.Day)
				{
					cm.Validity = false;
					await clientsMembershipsService.UpdateAsync(cm);
				}
			}
		}
		ClientMemberships = await clientsMembershipsService.GetClientAllMembershipsAsync(Client.Id);
	}
	private bool ValidityInDays(int vd, DateTime dfu, int checkins, TimeSpan fTime, TimeSpan tTime)
	{
		DateTime currentDT = DateTime.Now;
		if (currentDT.Subtract(dfu).Days < vd && currentDT.Hour > fTime.Hours && currentDT.Hour< tTime.Hours)
		{
			return true;
		}
		return false;
	}

	async Task OnDescriptionChangedAsync(ChangeEventArgs args)
	{
		string values = args.Value.ToString();
		await membershipFilteringList(values);
	}

	//Filtering
	protected async Task membershipFilteringList(String Value)
	{

		if (Value.Trim().Length > 0)
		{
			ClientMemberships = ClientMemberships.Where(x => GetMembershipDescription(x.MembershipId).Contains(Value)).ToList();
		}
		else
		{
			ClientMemberships = await clientsMembershipsService.GetClientAllMembershipsAsync(Client.Id);
		}
	}
	private string GetGymName(string gymId)
	{
		Gym gym = gymService.GetGym(gymId);
		return gym.Name;
	}

	private string GetMembershipDescription(string typeMembershipId)
	{
		string description = "";
		TypeOfMembership typeOfMembership = typeOfMembershipService.GetTypeOfMembership(typeMembershipId);
		if(typeOfMembership != null)
		{
			description = typeOfMembership.Description;
		}
		return description;
	}
	private string GetValidityInCheckIn(string typeMembershipId)
	{
		string validityInCheckIn = "";
		TypeOfMembership typeOfMembership = typeOfMembershipService.GetTypeOfMembership(typeMembershipId);
		if (typeOfMembership != null)
		{
			validityInCheckIn = typeOfMembership.ValidityInCheckIn.ToString();
		}
		return validityInCheckIn;
	}

	private void NavigateEditPageButtonHandler()
	{
		//navigationManager.NavigateTo($"/editclientinfo/{Client.Id}");
		navigationManager.NavigateTo($"/editclientinfo");
	}

}
